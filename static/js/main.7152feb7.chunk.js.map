{"version":3,"sources":["types/FilterBy.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/getFilteredTodos.ts","index.tsx"],"names":["FilterBy","TodoList","todos","onSelectTodo","selectedTodoId","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","React","memo","query","filterBy","onChangeQuery","onChangeFilterBy","value","onChange","target","ALL","ACTIVE","COMPLETE","placeholder","event","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","onCloseModal","useState","user","setUser","isLoading","setIsLoading","useEffect","getUserTodo","a","userId","userData","Error","href","email","name","App","setTodos","setSelectedTodo","hasRejectResponse","setHasRejectResponse","setQuery","setFilterBy","onLoadGetTodos","allTodos","visibleTodos","useMemo","filter","lowerCaseQuery","toLowerCase","includes","getFilteredTodos","hasError","hasNoError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7152feb7.chunk.js","sourcesContent":["export enum FilterBy {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETE = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  onSelectTodo: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectTodo,\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': selectedTodoId === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelectTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn(\n                      'far',\n                      {\n                        'fa-eye': selectedTodoId !== todo.id,\n                        'fa-eye-slash': selectedTodoId === todo.id,\n                      },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterBy } from '../../types/FilterBy';\n\ntype Props = {\n  query: string,\n  filterBy: FilterBy,\n  onChangeQuery: (query: string) => void,\n  onChangeFilterBy: (filterBy: FilterBy) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  query,\n  filterBy,\n  onChangeQuery,\n  onChangeFilterBy,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={({ target }) => onChangeFilterBy(target.value as FilterBy)}\n        >\n          <option value={FilterBy.ALL}>All</option>\n          <option value={FilterBy.ACTIVE}>Active</option>\n          <option value={FilterBy.COMPLETE}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        value={query}\n        className=\"input\"\n        placeholder=\"Search...\"\n        onChange={(event) => onChangeQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          <button\n            aria-label=\"button\"\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onChangeQuery('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n));\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  onCloseModal: (value: null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onCloseModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getUserTodo = async () => {\n      try {\n        const userData = await getUser(selectedTodo.userId);\n\n        setUser(userData);\n      } catch (error) {\n        throw new Error('no such user');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserTodo();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onCloseModal(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              {!user\n                ? (\n                  <p>No such user</p>\n                )\n                : (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useMemo, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterBy } from './types/FilterBy';\nimport { getFilteredTodos } from './utils/getFilteredTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasRejectResponse, setHasRejectResponse] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<FilterBy>(FilterBy.ALL);\n\n  useEffect(() => {\n    const onLoadGetTodos = async () => {\n      try {\n        const allTodos = await getTodos();\n\n        setTodos(allTodos);\n      } catch (error) {\n        setHasRejectResponse(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    onLoadGetTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => (\n    getFilteredTodos(todos, filterBy, query)\n  ), [query, filterBy, todos]);\n\n  const hasError = !isLoading && hasRejectResponse;\n  const hasNoError = !isLoading && !hasRejectResponse;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                filterBy={filterBy}\n                onChangeQuery={setQuery}\n                onChangeFilterBy={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {hasError && (\n                <p>Error loading todos, please reload page</p>\n              )}\n\n              {hasNoError && (\n                <TodoList\n                  todos={visibleTodos}\n                  onSelectTodo={setSelectedTodo}\n                  selectedTodoId={selectedTodo?.id || 0}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal selectedTodo={selectedTodo} onCloseModal={setSelectedTodo} />\n      )}\n    </>\n  );\n};\n","import { FilterBy } from '../types/FilterBy';\nimport { Todo } from '../types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  filterBy: FilterBy,\n  query: string,\n) => {\n  let allTodos = todos.filter(todo => {\n    switch (filterBy) {\n      case FilterBy.ACTIVE:\n        return !todo.completed;\n      case FilterBy.COMPLETE:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  if (query) {\n    const lowerCaseQuery = query.toLowerCase();\n\n    allTodos = allTodos.filter(todo => {\n      return todo.title.toLowerCase().includes(lowerCaseQuery);\n    });\n  }\n\n  return allTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}